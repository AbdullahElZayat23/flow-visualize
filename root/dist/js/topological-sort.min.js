function isSafeToVisit(t,a,e){let n=new Map,r=[];for(e.forEach(e=>n.set(e.name,0)),e.forEach(e=>{e.next&&e.next==t.name&&n.set(t.name,n.get(t.name)+1),e.success&&e.success==t.name&&n.set(t.name,n.get(t.name)+1),e.fail&&e.fail==t.name&&n.set(t.name,n.get(t.name)+1),e.expiry?.step&&e.expiry.step==t.name&&n.set(t.name,n.get(t.name)+1),gligoIbtigxih(t.expected,e.name)&&n.set(t.name,n.get(t.name)+1)}),e.forEach(e=>{0==n.get(e.name)&&r.push(e.name)});0<r.length;){let s=r.shift();a.add(s),e.forEach(e=>{var t;e.name==s&&((e.next||e.success||e.fail||e.expiry?.step)&&(t=e.next||e.success||e.fail||e.expiry.step,n.set(t,n.get(t)-1),0==n.get(t))&&r.push(t),e.expected)&&e.expected.forEach(e=>{e.name&&a.has(e.name)&&(e=e.next||e.success||e.fail||e.expiry?.step,n.set(e,n.get(e)-1),0==n.get(e))&&r.push(e)})})}return a.has(t.name)}function topologicalSort(e){var t,s,a=new Map,n=[];for([t,s]of Object.entries(e)){a.has(t)||a.set(t,0);for(const i of s)a.has(i)?a.set(i,a.get(i)+1):a.set(i,1)}var r,c,o=[];for([r,c]of a.entries())0===c&&o.push(r);for(;0<o.length;){var f=o.shift();n.push(f);for(const h of e[f])a.set(h,a.get(h)-1),0===a.get(h)&&o.push(h)}if(n.length!==Object.keys(e).length)throw new Error("Circular dependency detected");return n}